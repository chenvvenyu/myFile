映射配置文件中的值(application.yml)到类中
	1.@ConfiguratioinProperties(prefix = 'name')全局配置文件获取
	2.@Value('')
	3.@PropertySource(value = {"classpath:[文件名.文件]"}) 获取指定文件的值

Spring Boot项目中没用Spring 的配置文件，我们编写的配置文件不能自动识别
想让配置生效；@imporResource

@ResponseBody 进行响应
@RestController =@Controller + @ResponseBody 

//配置文件配置多环境
server:
	port:8081
spring:
	profiles:
	active:dev
---
server:
	port:803
spring:
	profiles:dev

打包后
命令行: java-jar [项目名].jar --spring.profiles.active=[选择的profiles]


组件:

@Configuration 声明是spring的配置类
	1.proxyBeanMethods:代理bean方法(是否有依赖)

组件的注册：
1.包扫描+组件注解(@Controller/@Service/@Repository/@Component)
	@ComponentScan 扫描路径
2.@Import快速导入
	@Import:容器就会自动注册组件
	ImportSelector:返回需要导入的组件的全类名
	ImpotBeanDefinitionRegistrar:手动注册bean到容器中
3.@Bean 给容器添加组件 (默认是单例)ioc容器启动后会调用方法创建
对象放到ioc容器中，每次获取就从ioc容器中拿(map.get())

	多例模式：ioc容器启动后不会创建对象放入容器中，
		而是在获取时创建对象
	模式选择：1.@Scope 设置组件 2.在xml中配置

	@Lazy:单例模式的懒加载，ioc容器启动时不创建对象,
	而是在第一次获取时创建对象
	@Conditional 条件注册组件

bean的生命周期:创建--初始化--销毁过程
	1.指定初始化和销毁方法 init-method,destroy-method
		在多例模式下不会触发销毁方法
	2.通过Bean实现InitizlizingBean,DisposableBean
	3.可以使用JSP250;
		@PostConstruct:bean创建并赋值，执行该方法
		@PreDestroy:在bean销毁前，执行该方法

自动装配
	1.@Autowired:自动注入IOC
		@Quailfier,@Primary
	2.@Resource(JSR250),@Inject(JST330)

AOP
	1.导入aop模块:Spring Aop(spring-aspects)
	2.定义一个业务逻辑类：
	3.定义一个切面类 @Aspect
		抽取共同切点@Pointcut
		前置通知@Before
		后置通知@After
		返回通知@AfterReturning
		异常通知@AfterThrowing
		环绕通知@Around
	4.将切面类和业务逻辑类都加入容器中
	5.给配置类中加@EnableAspectJAuttoProxy(开启基于注解的aop模式)

声明式实物
	1.导入相关依赖:数据源,数据驱动,Spring-jdbc
	2.配置数据源:JdbcTemplate(Spring提供的简化数据库操作的工具)
	3.给方法标注@Transactional 表示当前是个事务方法
	4.@EnableTransactionManagement 开启基于注解的事务管理功能
	5.配置事务管理器来控制事务

servlet

properties
	server
		port
		servlet.context-path