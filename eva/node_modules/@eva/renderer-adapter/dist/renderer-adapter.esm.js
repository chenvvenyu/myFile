import { Application as Application$1, Container as Container$1, Graphics as Graphics$1, mesh, Texture, Sprite as Sprite$1, extras, Text as Text$1 } from 'pixi.js';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var Application = (function (_super) {
    __extends(Application, _super);
    function Application(params) {
        var _this = this;
        params.autoStart = false;
        _this = _super.call(this, params) || this;
        return _this;
    }
    return Application;
}(Application$1));

var Container = (function (_super) {
    __extends(Container, _super);
    function Container() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Container;
}(Container$1));

var Graphics = (function (_super) {
    __extends(Graphics, _super);
    function Graphics() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Graphics;
}(Graphics$1));

var NinePatch = (function (_super) {
    __extends(NinePatch, _super);
    function NinePatch(img, leftWidth, topHeight, rightWidth, bottomHeight) {
        var _this = this;
        var texture;
        if (img === 'string') {
            texture = Texture.fromFrame(img);
        }
        else {
            texture = Texture.from(img);
        }
        _this = _super.call(this, texture, leftWidth, topHeight, rightWidth, bottomHeight) || this;
        return _this;
    }
    return NinePatch;
}(mesh.NineSlicePlane));

var Sprite = (function () {
    function Sprite(image) {
        this._image = null;
        this._image = image;
        if (image) {
            if (image instanceof HTMLImageElement) {
                this.sprite = Sprite$1.from(image);
            }
            else if (image instanceof Texture) {
                this.sprite = new Sprite$1(image);
            }
        }
        else {
            this.sprite = new Sprite$1();
        }
    }
    Object.defineProperty(Sprite.prototype, "image", {
        get: function () {
            return this._image;
        },
        set: function (val) {
            if (this._image === val) {
                return;
            }
            if (val instanceof HTMLImageElement) {
                this.sprite.texture && this.sprite.texture.destroy(false);
                this.sprite.texture = Texture.from(val);
            }
            else if (val instanceof Texture) {
                this.sprite.texture = val;
            }
            this._image = val;
        },
        enumerable: false,
        configurable: true
    });
    return Sprite;
}());

var SpriteAnimation = (function () {
    function SpriteAnimation(_a) {
        var frames = _a.frames;
        this.animatedSprite = new extras.AnimatedSprite(frames);
    }
    SpriteAnimation.prototype.play = function () {
        this.animatedSprite.play();
    };
    SpriteAnimation.prototype.stop = function () {
        this.animatedSprite.stop();
    };
    Object.defineProperty(SpriteAnimation.prototype, "speed", {
        get: function () {
            return this.animatedSprite.animationSpeed;
        },
        set: function (val) {
            this.animatedSprite.animationSpeed = val;
        },
        enumerable: false,
        configurable: true
    });
    return SpriteAnimation;
}());

var Text = (function (_super) {
    __extends(Text, _super);
    function Text(text, style) {
        return _super.call(this, text, style) || this;
    }
    return Text;
}(Text$1));

var PIXITilingSprite = extras.TilingSprite;
var TilingSprite = (function () {
    function TilingSprite(image) {
        this._image = null;
        this._image = image;
        if (image) {
            if (image instanceof HTMLImageElement) {
                this.tilingSprite = new PIXITilingSprite(Texture.from(image));
            }
            else if (image instanceof Texture) {
                this.tilingSprite = new PIXITilingSprite(image);
            }
        }
        else {
            this.tilingSprite = new PIXITilingSprite(Texture.EMPTY);
        }
    }
    Object.defineProperty(TilingSprite.prototype, "image", {
        get: function () {
            return this._image;
        },
        set: function (val) {
            if (this._image === val) {
                return;
            }
            if (val instanceof HTMLImageElement) {
                this.tilingSprite.texture = Texture.from(val);
            }
            else if (val instanceof Texture) {
                this.tilingSprite.texture = val;
            }
            this._image = val;
        },
        enumerable: false,
        configurable: true
    });
    return TilingSprite;
}());

export { Application, Container, Graphics, NinePatch, Sprite, SpriteAnimation, Text, TilingSprite };
